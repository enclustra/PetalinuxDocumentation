From 086618b744ccdea902afc224823138815a8d7939 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Enclustra?= <support@enclustra.com>
Date: Wed, 21 Sep 2022 10:29:30 +0200
Subject: [PATCH] emmc

Enclustra EMMC patch
---
 drivers/mmc/mmc.c        |  3 ++-
 drivers/mmc/sdhci.c      | 12 ++++++++----
 drivers/mmc/zynq_sdhci.c | 16 +++++++++++++---
 include/sdhci.h          |  1 +
 4 files changed, 24 insertions(+), 8 deletions(-)

diff --git a/drivers/mmc/mmc.c b/drivers/mmc/mmc.c
index 4d9871d69f..c85d2e7da3 100644
--- a/drivers/mmc/mmc.c
+++ b/drivers/mmc/mmc.c
@@ -2915,7 +2915,6 @@ static int mmc_complete_init(struct mmc *mmc)
 {
 	int err = 0;
 
-	mmc->init_in_progress = 0;
 	if (mmc->op_cond_pending)
 		err = mmc_complete_op_cond(mmc);
 
@@ -2925,6 +2924,8 @@ static int mmc_complete_init(struct mmc *mmc)
 		mmc->has_init = 0;
 	else
 		mmc->has_init = 1;
+		
+	mmc->init_in_progress = 0;
 	return err;
 }
 
diff --git a/drivers/mmc/sdhci.c b/drivers/mmc/sdhci.c
index 766e4a6b0c..2c53c99dcb 100644
--- a/drivers/mmc/sdhci.c
+++ b/drivers/mmc/sdhci.c
@@ -220,6 +220,13 @@ static int sdhci_send_command(struct mmc *mmc, struct mmc_cmd *cmd,
 	/* Timeout unit - ms */
 	static unsigned int cmd_timeout = SDHCI_CMD_DEFAULT_TIMEOUT;
 
+	/* Some eMMC cards failes to initialize when we issue CMD8 or
+		CMD55 before the end of mmc_start_init function */
+	if ((host->quirks & SDHCI_QUIRK_EMMC_INIT) && (!mmc->has_init && !mmc->init_in_progress)){
+		if ((cmd->cmdidx == SD_CMD_SEND_IF_COND) || (cmd->cmdidx == MMC_CMD_APP_CMD))
+			return -ETIMEDOUT;
+	}
+
 	mask = SDHCI_CMD_INHIBIT | SDHCI_DATA_INHIBIT;
 
 	/* We shouldn't wait for data inihibit for stop commands, even
@@ -923,10 +930,7 @@ int sdhci_setup_cfg(struct mmc_config *cfg, struct sdhci_host *host,
 	if (host->quirks & SDHCI_QUIRK_BROKEN_VOLTAGE)
 		cfg->voltages |= host->voltages;
 
-	if (caps & SDHCI_CAN_DO_HISPD)
-		cfg->host_caps |= MMC_MODE_HS | MMC_MODE_HS_52MHz;
-
-	cfg->host_caps |= MMC_MODE_4BIT;
+	cfg->host_caps |= MMC_MODE_HS | MMC_MODE_HS_52MHz | MMC_MODE_8BIT | MMC_MODE_4BIT;
 
 	/* Since Host Controller Version3.0 */
 	if (SDHCI_GET_VERSION(host) >= SDHCI_SPEC_300) {
diff --git a/drivers/mmc/zynq_sdhci.c b/drivers/mmc/zynq_sdhci.c
index 6fe4fbcbfd..f86f7f4616 100644
--- a/drivers/mmc/zynq_sdhci.c
+++ b/drivers/mmc/zynq_sdhci.c
@@ -64,6 +64,7 @@ struct arasan_sdhci_priv {
 	u8 deviceid;
 	u8 bank;
 	u8 no_1p8;
+	u8 is_emmc;
 	struct reset_ctl_bulk resets;
 };
 
@@ -812,7 +813,7 @@ static int arasan_sdhci_probe(struct udevice *dev)
 	unsigned long clock;
 	int ret;
 
-	host = priv->host;
+        host = priv->host;
 
 #if defined(CONFIG_ARCH_ZYNQMP)
 	if (device_is_compatible(dev, "xlnx,zynqmp-8.9a")) {
@@ -853,10 +854,14 @@ static int arasan_sdhci_probe(struct udevice *dev)
 	host->quirks |= SDHCI_QUIRK_BROKEN_HISPD_MODE;
 #endif
 
+	if (priv->is_emmc)
+		host->quirks |= SDHCI_QUIRK_EMMC_INIT;
+
+	host->version = sdhci_readw(host, SDHCI_HOST_VERSION);
 	if (priv->no_1p8)
 		host->quirks |= SDHCI_QUIRK_NO_1_8_V;
 
-	plat->cfg.f_max = CONFIG_ZYNQ_SDHCI_MAX_FREQ;
+	plat->cfg.f_max = dev_read_u32_default(dev, "max-frequency", CONFIG_ZYNQ_SDHCI_MAX_FREQ);
 
 	ret = mmc_of_parse(dev, &plat->cfg);
 	if (ret)
@@ -907,6 +912,11 @@ static int arasan_sdhci_of_to_plat(struct udevice *dev)
 
 	priv->host->name = dev->name;
 
+	if (fdt_get_property(gd->fdt_blob, dev_of_offset(dev), "is_emmc", NULL))
+		priv->is_emmc = 1;
+	else
+		priv->is_emmc = 0;
+
 #if defined(CONFIG_ARCH_ZYNQMP) || defined(CONFIG_ARCH_VERSAL)
 	priv->host->ops = &arasan_ops;
 	arasan_dt_parse_clk_phases(dev);
@@ -917,7 +927,7 @@ static int arasan_sdhci_of_to_plat(struct udevice *dev)
 		return PTR_ERR(priv->host->ioaddr);
 
 	priv->deviceid = dev_read_u32_default(dev, "xlnx,device_id", -1);
-	priv->bank = dev_read_u32_default(dev, "xlnx,mio-bank", 0);
+	priv->bank = dev_read_u32_default(dev, "xlnx,mio_bank", -1);
 	priv->no_1p8 = dev_read_bool(dev, "no-1-8-v");
 
 	return 0;
diff --git a/include/sdhci.h b/include/sdhci.h
index c718dd7206..9994559e69 100644
--- a/include/sdhci.h
+++ b/include/sdhci.h
@@ -248,6 +248,7 @@
 #define SDHCI_QUIRK_USE_WIDE8		(1 << 8)
 #define SDHCI_QUIRK_NO_1_8_V		(1 << 9)
 
+#define SDHCI_QUIRK_EMMC_INIT		(1 << 11)
 /* to make gcc happy */
 struct sdhci_host;
 
