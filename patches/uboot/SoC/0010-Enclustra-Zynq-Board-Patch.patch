From 40229235053198bebbc04d90b3ebfa7b5b96879a Mon Sep 17 00:00:00 2001
From: Enclustra <support@enclustra.com>
Date: Thu, 22 Sep 2022 09:16:15 +0200
Subject: [PATCH] zynq_board

Enclustra zynq_board patch

%% original patch: zynq_board.patch
---
 board/xilinx/Kconfig             |  17 +++-
 board/xilinx/common/enclustra.c  |  94 ++++++++++++++++++++
 board/xilinx/zynq/Makefile       |   2 +
 board/xilinx/zynq/board_mux.c    | 147 +++++++++++++++++++++++++++++++
 common/board_r.c                 |   6 ++
 drivers/mtd/nand/raw/zynq_nand.c |   7 ++
 drivers/spi/zynq_qspi.c          |  23 +++--
 include/init.h                   |   2 +
 8 files changed, 289 insertions(+), 9 deletions(-)
 create mode 100644 board/xilinx/common/enclustra.c
 create mode 100644 board/xilinx/zynq/board_mux.c

diff --git a/board/xilinx/Kconfig b/board/xilinx/Kconfig
index 64507b5d84..955831096a 100644
--- a/board/xilinx/Kconfig
+++ b/board/xilinx/Kconfig
@@ -41,7 +41,7 @@ config XILINX_PS_INIT_FILE
 endif
 
 config XILINX_OF_BOARD_DTB_ADDR
-	hex "Default DTB pickup address"
+	hex
 	default 0x1000 if ARCH_VERSAL
 	default 0x100000 if ARCH_ZYNQ || ARCH_ZYNQMP
 	depends on OF_BOARD || OF_SEPARATE
@@ -57,6 +57,21 @@ config BOOT_SCRIPT_OFFSET
 	help
 	   Specifies distro boot script offset in NAND/QSPI/NOR flash.
 
+config ENCLUSTRA_EEPROM_MAC
+	bool "Enable support for reading MAC address from EEPROM"
+	help
+	  Enables MAC address readout from EEPROM
+
+config ENCLUSTRA_NANDMUX
+	bool "QSPI NAND multiplexer"
+	help
+	  Enables MIO multiplexer for Enclustra ZX modules
+
+config ENCLUSTRA_QSPI_FLASHMAP
+	bool "QSPI Flash Map"
+	help
+	  Includes device specific QSPI flash maps in the U-Boot environment
+
 config ZYNQ_MAC_IN_EEPROM
 	bool "Reading MAC address from EEPROM"
 	help
diff --git a/board/xilinx/common/enclustra.c b/board/xilinx/common/enclustra.c
new file mode 100644
index 0000000000..cfd6389af5
--- /dev/null
+++ b/board/xilinx/common/enclustra.c
@@ -0,0 +1,94 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * (C) Copyright 2020 Enclustra GmbH
+ */
+
+#include <common.h>
+#include <env.h>
+#include <enclustra/eeprom-mac.h>
+
+#define ENCLUSTRA_MAC               0xF7B020
+
+/* Default MAC address */
+#define ENCLUSTRA_ETHADDR_DEFAULT "00:0A:35:01:02:03"
+#define ENCLUSTRA_ETH1ADDR_DEFAULT "00:0A:35:01:02:04"
+
+static struct eeprom_mem eeproms[] = {
+	{ .mac_reader = atsha204_get_mac },
+	{ .mac_reader = ds28_get_mac }
+};
+
+int enclustra_common(void)
+{
+	int i;
+	u8 hwaddr[6] = {0, 0, 0, 0, 0, 0};
+	u32 hwaddr_h;
+	char hwaddr_str[18];
+	bool hwaddr_set = false;
+	
+#if defined(CONFIG_ENCLUSTRA_EEPROM_MAC)
+
+	if (!env_get("ethaddr")) {
+		for (i = 0; i < ARRAY_SIZE(eeproms); i++) {
+			if (eeproms[i].mac_reader(hwaddr))
+				continue;
+
+			/* Workaround for incorrect MAC address caused by
+			 * flashing to EEPROM addresses like 20:B0:F0:XX:XX:XX
+			 * instead of 20:B0:F7:XX:XX:XX
+			 */
+			hwaddr[2] = (hwaddr[2] == 0xF0) ? 0xF7 : hwaddr[2];
+
+			/* Check if the value is a valid mac registered for
+			 * Enclustra  GmbH
+			 */
+			hwaddr_h = hwaddr[0] | hwaddr[1] << 8 | hwaddr[2] << 16;
+			if ((hwaddr_h & 0xFFFFFF) != ENCLUSTRA_MAC)
+				continue;
+
+			/* Format the address using a string */
+			sprintf(hwaddr_str,
+				"%02X:%02X:%02X:%02X:%02X:%02X",
+				hwaddr[0],
+				hwaddr[1],
+				hwaddr[2],
+				hwaddr[3],
+				hwaddr[4],
+				hwaddr[5]);
+
+			/* Set the actual env variable */
+			env_set("ethaddr", hwaddr_str);
+
+			/* increment MAC addr */
+			hwaddr_h = (hwaddr[3] << 16) | (hwaddr[4] << 8) | hwaddr[5];
+			hwaddr_h = (hwaddr_h + 1) & 0xFFFFFF;
+			hwaddr[3] = (hwaddr_h >> 16) & 0xFF;
+			hwaddr[4] = (hwaddr_h >> 8) & 0xFF;
+			hwaddr[5] = hwaddr_h & 0xFF;
+
+			/* Format the address using a string */
+			sprintf(hwaddr_str,
+				"%02X:%02X:%02X:%02X:%02X:%02X",
+				hwaddr[0],
+				hwaddr[1],
+				hwaddr[2],
+				hwaddr[3],
+				hwaddr[4],
+				hwaddr[5]);
+
+			/* Set the actual env variable */
+			env_set("eth1addr", hwaddr_str);
+
+			hwaddr_set = true;
+			break;
+		}
+
+		if (!hwaddr_set) {
+			env_set("ethaddr", ENCLUSTRA_ETHADDR_DEFAULT);
+			env_set("eth1addr", ENCLUSTRA_ETH1ADDR_DEFAULT);
+		}
+	}
+	return 0;
+#endif
+}
+
diff --git a/board/xilinx/zynq/Makefile b/board/xilinx/zynq/Makefile
index 8566171589..960c5de2c0 100644
--- a/board/xilinx/zynq/Makefile
+++ b/board/xilinx/zynq/Makefile
@@ -4,6 +4,8 @@
 # Wolfgang Denk, DENX Software Engineering, wd@denx.de.
 
 obj-y	:= board.o
+obj-y	+= ../common/enclustra.o
+obj-y   += board_mux.o
 
 ifneq ($(CONFIG_XILINX_PS_INIT_FILE),"")
 PS_INIT_FILE := $(shell cd $(srctree); readlink -f $(CONFIG_XILINX_PS_INIT_FILE))
diff --git a/board/xilinx/zynq/board_mux.c b/board/xilinx/zynq/board_mux.c
new file mode 100644
index 0000000000..d96a568944
--- /dev/null
+++ b/board/xilinx/zynq/board_mux.c
@@ -0,0 +1,147 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * (C) Copyright 2020 Enclustra GmbH
+ */
+
+#include <common.h>
+#include <command.h>
+#include <env.h>
+#include <fdtdec.h>
+#include <zynqpl.h>
+#include <asm/arch/hardware.h>
+#include <asm/arch/sys_proto.h>
+#include <asm/io.h>
+#include <asm/arch/ps7_init_gpl.h>
+
+#define NANDMUX         0x00000010
+#define NANDMUX_PULLUP  0x00001010
+#define QSPIMUX         0x00000002
+#define QSPIMUX_PULLUP  0x00001002
+#define TRISTATE_PULLUP 0x00001001
+#define GPIO            0x00000000
+#define GPIO_PULLUP     0x00001000
+#define IO_TYPE_MASK    0x00000E00
+
+/* Select which flash type currently uses Pins */
+#define ZX_NONE    (0)
+#define ZX_NAND    (1)
+#define ZX_QSPI    (2)
+
+#ifdef CONFIG_ENCLUSTRA_NANDMUX
+
+extern void zynq_slcr_unlock(void);
+extern void zynq_slcr_lock(void);
+/**
+ * Set pin muxing for NAND access
+ */
+static void set_mio_mux_nand( void ){
+
+	zynq_slcr_unlock();
+
+	/* Define MuxIO for NAND */
+	/* Caution: overwrite some QSPI muxing !!! */
+	writel(NANDMUX_PULLUP            | (readl(&slcr_base->mio_pin[0])  & IO_TYPE_MASK), &slcr_base->mio_pin[0]);  /* Pin 0, NAND Flash Chip Select */
+	writel(TRISTATE_PULLUP           | (readl(&slcr_base->mio_pin[1])  & IO_TYPE_MASK), &slcr_base->mio_pin[1]);  /* Pin 1, not NAND */
+	writel(NANDMUX                   | (readl(&slcr_base->mio_pin[2])  & IO_TYPE_MASK), &slcr_base->mio_pin[2]);  /* Pin 2, NAND Flash ALEn */
+	writel(NANDMUX                   | (readl(&slcr_base->mio_pin[3])  & IO_TYPE_MASK), &slcr_base->mio_pin[3]);  /* Pin 3, NAND WE_B */
+	writel(NANDMUX                   | (readl(&slcr_base->mio_pin[4])  & IO_TYPE_MASK), &slcr_base->mio_pin[4]);  /* Pin 4, NAND Flash IO Bit 2 */
+	writel(NANDMUX                   | (readl(&slcr_base->mio_pin[5])  & IO_TYPE_MASK), &slcr_base->mio_pin[5]);  /* Pin 5, NAND Flash IO Bit 0 */
+	writel(NANDMUX                   | (readl(&slcr_base->mio_pin[6])  & IO_TYPE_MASK), &slcr_base->mio_pin[6]);  /* Pin 6, NAND Flash IO Bit 1 */
+	writel(NANDMUX                   | (readl(&slcr_base->mio_pin[7])  & IO_TYPE_MASK), &slcr_base->mio_pin[7]);  /* Pin 7, NAND Flash CLE_B */
+	writel(NANDMUX                   | (readl(&slcr_base->mio_pin[8])  & IO_TYPE_MASK), &slcr_base->mio_pin[8]);  /* Pin 8, NAND Flash RD_B */
+	writel(NANDMUX_PULLUP            | (readl(&slcr_base->mio_pin[9])  & IO_TYPE_MASK), &slcr_base->mio_pin[9]);  /* Pin 9, NAND Flash IO Bit 4 */
+	writel(NANDMUX_PULLUP            | (readl(&slcr_base->mio_pin[10]) & IO_TYPE_MASK), &slcr_base->mio_pin[10]); /* Pin 10, NAND Flash IO Bit 5 */
+	writel(NANDMUX_PULLUP            | (readl(&slcr_base->mio_pin[11]) & IO_TYPE_MASK), &slcr_base->mio_pin[11]); /* Pin 11, NAND Flash IO Bit 6 */
+	writel(NANDMUX_PULLUP            | (readl(&slcr_base->mio_pin[12]) & IO_TYPE_MASK), &slcr_base->mio_pin[12]); /* Pin 12, NAND Flash IO Bit 7 */
+	writel(NANDMUX_PULLUP            | (readl(&slcr_base->mio_pin[13]) & IO_TYPE_MASK), &slcr_base->mio_pin[13]); /* Pin 13, NAND Flash IO Bit 3 */
+	writel(NANDMUX | TRISTATE_PULLUP | (readl(&slcr_base->mio_pin[14]) & IO_TYPE_MASK), &slcr_base->mio_pin[14]); /* Pin 14, NAND Flash Busy */
+
+	// configure SMC_CLK_CTRL (usually done by FSBL)
+	uint32_t in_clk = 33333334; // input clock in Hz
+	uint32_t smc_clk = 100000000; // requested SMC clock frequency in Hz
+	uint32_t iopll_fb_mult = (readl(&slcr_base->io_pll_ctrl) >> 12) & 0x3F; // get IO PLL feedback divider
+	uint32_t smc_clk_div = (in_clk*iopll_fb_mult)/smc_clk;  // calculate SMC clock divider
+	writel((smc_clk_div << 8) | 0x1, &slcr_base->smc_clk_ctrl); // select IO PLL as source, enable clock and set divider value
+
+	zynq_slcr_lock();
+	
+	printf("Flash MIO pins configured to NAND mode\n");
+}
+
+/**
+ * Set the pin muxing for QSPI NOR access
+ */
+static void set_mio_mux_qspi( void ){
+
+	zynq_slcr_unlock();
+
+	/* Define MuxIO for QSPI */
+	/* Caution: overwrite some NAND muxing !!! */
+	writel(GPIO_PULLUP    | (readl(&slcr_base->mio_pin[0])  & IO_TYPE_MASK), &slcr_base->mio_pin[0]);  /* Pin 0, Level 3 Mux */
+	writel(QSPIMUX_PULLUP | (readl(&slcr_base->mio_pin[1])  & IO_TYPE_MASK), &slcr_base->mio_pin[1]);  /* Pin 1, Quad SPI 0 Chip Select */
+	writel(QSPIMUX        | (readl(&slcr_base->mio_pin[2])  & IO_TYPE_MASK), &slcr_base->mio_pin[2]);  /* Pin 2, Quad SPI 0 IO Bit 0 */
+	writel(QSPIMUX        | (readl(&slcr_base->mio_pin[3])  & IO_TYPE_MASK), &slcr_base->mio_pin[3]);  /* Pin 3, Quad SPI 0 IO Bit 1 */
+	writel(QSPIMUX        | (readl(&slcr_base->mio_pin[4])  & IO_TYPE_MASK), &slcr_base->mio_pin[4]);  /* Pin 4, Quad SPI 0 IO Bit 2 */
+	writel(QSPIMUX        | (readl(&slcr_base->mio_pin[5])  & IO_TYPE_MASK), &slcr_base->mio_pin[5]);  /* Pin 5, Quad SPI 0 IO Bit 3 */
+	writel(QSPIMUX        | (readl(&slcr_base->mio_pin[6])  & IO_TYPE_MASK), &slcr_base->mio_pin[6]);  /* Pin 6, Quad SPI 0 Clock */
+	writel(GPIO           | (readl(&slcr_base->mio_pin[7])  & IO_TYPE_MASK), &slcr_base->mio_pin[7]);  /* Pin 7, Reserved*/
+	writel(GPIO           | (readl(&slcr_base->mio_pin[8])  & IO_TYPE_MASK), &slcr_base->mio_pin[8]);  /* Pin 8, Quad SPI Feedback Clock */
+	writel(GPIO_PULLUP    | (readl(&slcr_base->mio_pin[9])  & IO_TYPE_MASK), &slcr_base->mio_pin[9]);  /* Pin 9, Level mux -> disable */
+	writel(GPIO_PULLUP    | (readl(&slcr_base->mio_pin[10]) & IO_TYPE_MASK), &slcr_base->mio_pin[10]); /* Pin 10, Level mux -> disable */
+	writel(GPIO_PULLUP    | (readl(&slcr_base->mio_pin[11]) & IO_TYPE_MASK), &slcr_base->mio_pin[11]); /* Pin 11, Level mux -> disable */
+	writel(GPIO_PULLUP    | (readl(&slcr_base->mio_pin[12]) & IO_TYPE_MASK), &slcr_base->mio_pin[12]); /* Pin 12, Level mux -> disable */
+	writel(GPIO_PULLUP    | (readl(&slcr_base->mio_pin[13]) & IO_TYPE_MASK), &slcr_base->mio_pin[13]); /* Pin 13, Level mux -> disable */
+	writel(GPIO_PULLUP    | (readl(&slcr_base->mio_pin[14]) & IO_TYPE_MASK), &slcr_base->mio_pin[14]); /* Pin 14, Level mux -> disable */
+
+	zynq_slcr_lock();
+	
+	printf("Flash MIO pins configured to QSPI mode\n");
+}
+
+static int zx_current_storage = ZX_NONE;
+
+void zx_set_storage (char* arg) {
+	int store = ZX_NONE;
+
+	if (!strcmp(arg, "NAND"))
+		store = ZX_NAND;
+	else if (!strcmp(arg, "QSPI"))
+		store = ZX_QSPI;
+
+	if (store == zx_current_storage)
+		return;
+
+	switch (store)
+	{
+		case ZX_NAND:
+			set_mio_mux_nand ();
+			zx_current_storage = ZX_NAND;
+			break;
+		case ZX_QSPI:
+			set_mio_mux_qspi();
+			zx_current_storage = ZX_QSPI;
+			break;
+		default:
+			zx_current_storage = ZX_NONE;
+			break;
+	}
+}
+#endif
+
+int zx_set_storage_cmd(struct cmd_tbl *cmdtp, int flag, int argc, char * const argv[])
+{
+#ifdef CONFIG_ENCLUSTRA_NANDMUX
+	if(argc != 2)
+		return CMD_RET_USAGE;
+	if(!strcmp(argv[1], "NAND"))
+		zx_set_storage("NAND");
+	else if (!strcmp(argv[1], "QSPI"))
+		zx_set_storage("QSPI");
+	else return CMD_RET_USAGE;
+#endif
+	return CMD_RET_SUCCESS;
+}
+
+U_BOOT_CMD(zx_set_storage, 2, 0, zx_set_storage_cmd,
+	"Set non volatile memory access",
+	"<NAND|QSPI> - Set access for the selected memory device");
diff --git a/common/board_r.c b/common/board_r.c
index 31a59c585a..946ee00009 100644
--- a/common/board_r.c
+++ b/common/board_r.c
@@ -767,6 +767,12 @@ static init_fnc_t init_sequence_r[] = {
 #ifdef CONFIG_BOARD_LATE_INIT
 	board_late_init,
 #endif
+#ifdef CONFIG_ENCLUSTRA_QSPI_FLASHMAP
+	enclustra_board,
+#endif
+#ifdef CONFIG_ENCLUSTRA_EEPROM_MAC
+	enclustra_common,
+#endif
 #if defined(CONFIG_SCSI) && !defined(CONFIG_DM_SCSI)
 	INIT_FUNC_WATCHDOG_RESET
 	initr_scsi,
diff --git a/drivers/mtd/nand/raw/zynq_nand.c b/drivers/mtd/nand/raw/zynq_nand.c
index 10e9cd18b0..1440013c42 100644
--- a/drivers/mtd/nand/raw/zynq_nand.c
+++ b/drivers/mtd/nand/raw/zynq_nand.c
@@ -1068,6 +1068,10 @@ static int zynq_nand_check_is_16bit_bw_flash(void)
 	return is_16bit_bw;
 }
 
+#ifdef CONFIG_ENCLUSTRA_NANDMUX
+extern void zx_set_storage (char * arg);
+#endif
+
 static int zynq_nand_probe(struct udevice *dev)
 {
 	struct zynq_nand_info *zynq = dev_get_priv(dev);
@@ -1094,6 +1098,9 @@ static int zynq_nand_probe(struct udevice *dev)
 			return -ENODEV;
 		}
 	}
+#ifdef CONFIG_ENCLUSTRA_NANDMUX
+        zx_set_storage("NAND");
+#endif
 
 	if (!ofnode_is_available(of_nand)) {
 		debug("Nand node in dt disabled\n");
diff --git a/drivers/spi/zynq_qspi.c b/drivers/spi/zynq_qspi.c
index c627c9833e..d1339c935f 100644
--- a/drivers/spi/zynq_qspi.c
+++ b/drivers/spi/zynq_qspi.c
@@ -69,7 +69,9 @@ DECLARE_GLOBAL_DATA_PTR;
 #define ZYNQ_QSPI_DEFAULT_BAUD_RATE	0x2
 
 #define ZYNQ_QSPI_FIFO_DEPTH		63
-#define ZYNQ_QSPI_WAIT			(CONFIG_SYS_HZ / 100)	/* 10 ms */
+#ifndef CONFIG_SYS_ZYNQ_QSPI_WAIT
+#define CONFIG_SYS_ZYNQ_QSPI_WAIT	CONFIG_SYS_HZ/100	/* 10 ms */
+#endif
 
 /* zynq qspi register set */
 struct zynq_qspi_regs {
@@ -296,6 +298,10 @@ static int zynq_qspi_child_pre_probe(struct udevice *bus)
 	return 0;
 }
 
+#ifdef CONFIG_ENCLUSTRA_NANDMUX
+extern void zx_set_storage(char* arg);
+#endif
+
 static int zynq_qspi_probe(struct udevice *bus)
 {
 	struct zynq_qspi_plat *plat = dev_get_plat(bus);
@@ -304,6 +310,10 @@ static int zynq_qspi_probe(struct udevice *bus)
 	unsigned long clock;
 	int ret;
 
+#ifdef CONFIG_ENCLUSTRA_NANDMUX
+	zx_set_storage("QSPI");
+#endif
+
 	priv->regs = plat->regs;
 	priv->fifo_depth = ZYNQ_QSPI_FIFO_DEPTH;
 	priv->is_dual = plat->is_dual;
@@ -481,8 +491,8 @@ static void zynq_qspi_fill_tx_fifo(struct zynq_qspi_priv *priv, u32 size)
 	unsigned len, offset;
 	struct zynq_qspi_regs *regs = priv->regs;
 	static const unsigned offsets[4] = {
-		ZYNQ_QSPI_TXD_00_01_OFFSET, ZYNQ_QSPI_TXD_00_10_OFFSET,
-		ZYNQ_QSPI_TXD_00_11_OFFSET, ZYNQ_QSPI_TXD_00_00_OFFSET };
+		ZYNQ_QSPI_TXD_00_00_OFFSET, ZYNQ_QSPI_TXD_00_01_OFFSET,
+		ZYNQ_QSPI_TXD_00_10_OFFSET, ZYNQ_QSPI_TXD_00_11_OFFSET };
 
 	while ((fifocount < size) &&
 			(priv->bytes_to_transfer > 0)) {
@@ -504,10 +514,7 @@ static void zynq_qspi_fill_tx_fifo(struct zynq_qspi_priv *priv, u32 size)
 				return;
 			len = priv->bytes_to_transfer;
 			zynq_qspi_write_data(priv, &data, len);
-			if (priv->is_dual && !priv->is_inst && (len % 2))
-				len++;
-			offset = (priv->rx_buf) ?
-				  offsets[3] : offsets[len - 1];
+			offset = (priv->rx_buf) ? offsets[0] : offsets[len];
 			writel(data, &regs->cr + (offset / 4));
 		}
 	}
@@ -539,7 +546,7 @@ static int zynq_qspi_irq_poll(struct zynq_qspi_priv *priv)
 	do {
 		status = readl(&regs->isr);
 	} while ((status == 0) &&
-		(get_timer(timeout) < ZYNQ_QSPI_WAIT));
+		(get_timer(timeout) < CONFIG_SYS_ZYNQ_QSPI_WAIT));
 
 	if (status == 0) {
 		printf("zynq_qspi_irq_poll: Timeout!\n");
diff --git a/include/init.h b/include/init.h
index f2cd46dead..10ab1501af 100644
--- a/include/init.h
+++ b/include/init.h
@@ -294,6 +294,8 @@ int board_early_init_f(void);
 /* manipulate the U-Boot fdt before its relocation */
 int board_fix_fdt(void *rw_fdt_blob);
 int board_late_init(void);
+int enclustra_board(void);
+int enclustra_common(void);
 int board_postclk_init(void); /* after clocks/timebase, before env/serial */
 int board_early_init_r(void);
 
-- 
2.25.1

